@{
    Layout = "_Layout";
    ViewData["Title"] = "EventRecord";
}

<div class="main-container" id="app" style="max-width:75%;">
    <main role="main" class="pb-3">

        <div class="placeholder-block"></div>

        <div class="row">

            <div class="col-6">

                <form class="row gx-3 gy-2 align-items-center" style="margin-bottom:15px;">
                    <div class="col-sm-6">
                        <label for="eventName">事件名：</label>
                        <input type="text" class="form-control" v-model="eventName" placeholder="请输入事件名">
                    </div>
                    <div class="col-auto">
                        <button type="button" class="btn btn-primary" v-on:click="getEventRecordList()">查询</button>
                    </div>
                </form>

                <div class="event-record-container">
                    <div class="list-group" v-for="(item,index) in eventRecordList">
                        <a class="list-group-item list-group-item-action" aria-current="true" :class="{'item-active' : item.EventRecordId == currentEventRecord?.EventRecordId}" v-on:click="selectEventRecord(item)">
                            <div class="d-flex w-100 justify-content-between item-header">
                                <h5 class="mb-1">{{item.EventName}}</h5>
                                <small>{{item.RecordTime}}</small>
                            </div>
                            <div class="record-item">IPAddress:&nbsp;<small class="text-muted">{{item.ClientIPAddress}}</small></div>
                            <div class="record-item">QueryString:&nbsp;<small class="text-muted">{{item.QueryString}}</small></div>
                            <div class="record-item">
                                Header:
                                <div v-for="(value,key,index) in item.Header" class="header-item">
                                    <small class="text-muted">{{key}}: {{value}}</small>
                                </div>
                            </div>
                            <div class="record-item">Data:<small class="text-muted">{{item.Data}}</small></div>
                            <div class="record-item">订阅完成率:&nbsp;<small class="text-muted">{{item.SubscriptionCompletionRate}}&nbsp;%</small></div>
                        </a>
                    </div>
                </div>

                <nav aria-label="Page navigation example" class="event-record-navigation">
                    <ul class="pagination justify-content-end">
                        <li class="page-item">
                            <a class="page-link" href="#" aria-label="Previous" v-on:click="nextPage()">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        <li class="page-item" v-for="(item,index) in pageNumbers">
                            <a class="page-link" href="#" v-on:click="skipPage(index)">{{index+1}}</a>
                        </li>
                        <li class="page-item">
                            <a class="page-link" href="#" aria-label="Next" v-on:click="previousPage()">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>

            </div>

            <div class="col-6">

                <div class="scription-record-container">

                    <div class="alert alert-primary" role="alert" v-show="currentEventRecord">
                        【{{currentEventRecord?.RecordTime}}】 的【<span style="font:bold;">{{currentEventRecord?.EventName}}</span>】的订阅
                    </div>

                    <div v-for="(item,index) in eventRecordSubscriptionList">
                        <div class="card scription-record-item mb-3" :class="item.SubscriptionResult ? 'border-success' : 'border-danger'" v-on:click="selectEventRecordSubscription(item)">
                            <div class="card-header">
                                {{item.EndpointName}}
                                <span style="float:right;" :class="item.SubscriptionResult ? 'text-success' : 'text-danger'">
                                    订阅{{item.SubscriptionResult ? '成功' : '失败'}}
                                    <svg v-show="!item.SubscriptionResult" xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-x-circle" viewBox="0 0 16 16" color="#dc3545">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                                    </svg>
                                    <svg v-show="item.SubscriptionResult" xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-check-circle" viewBox="0 0 16 16" color="#108750">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                        <path d="M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z" />
                                    </svg>
                                </span>
                            </div>
                            <div class="card-body" :class="item.SubscriptionResult ? 'text-success' : 'text-danger'">
                                <div class="card-title">{{item.SubscriptionProtocol}} &nbsp; {{item.EndpointUrl}}</div>
                                <div class="card-title">{{item.RequestTimeout}} &nbsp;秒超时</div>
                                <div class="card-text" v-for="(policyItem,policyIndex) in item.FailedRetryPolicy">
                                    第<span>{{policyIndex+1}}</span>次：<span>{{getBehavior(policyItem.Behavior)}}</span>，<span>{{policyItem.RetryDelayCount}}</span><span>{{getDelayUnit(policyItem.RetryDelayUnit)}}</span>
                                </div>
                                <div v-show="!item.SubscriptionResult" style="text-align:right;">
                                    <button type="button" class="btn btn-light" v-on:click="subscription(item)">立即订阅</button>
                                </div>
                            </div>
                        </div>

                        <div class="collapse collapse-container" :id="item.EventRecordSubscriptionId">

                            <div v-show="endpointRecordList.length > 0" class="card card-body endpoint-record-container" v-for="(item,index) in endpointRecordList" :class="item.IsSuccessStatusCode ? 'border-success' : 'border-danger'">
                                <div class="record-item">Subscription:&nbsp;<small class="text-muted">{{item.SubscriptionTime}}&nbsp;&nbsp;{{getSubscriptionType(item.SubscriptionType)}}订阅</small></div>
                                <div class="record-item">
                                    ResponseHeaders:
                                    <div v-for="(value,key,index) in item.ResponseHeaders" class="header-item">
                                        <small class="text-muted">{{key}}:&nbsp;{{value}}</small>
                                    </div>
                                </div>
                                <div class="record-item">ResponseTime:&nbsp;<small class="text-muted">{{item.ResponseTime}}</small></div>
                                <div class="record-item">ResponseStatus:&nbsp;<small class="text-muted">{{item.ResponseStatus}}&nbsp;{{item.ResponseStatusCode}}</small></div>
                                <div class="record-item">IsSuccessStatusCode:&nbsp;<small class="text-muted">{{item.IsSuccessStatusCode}}</small></div>
                                <div class="record-item">ResponseContent:&nbsp;<small class="text-muted">{{item.ResponseContent}}</small></div>
                                <div class="record-item">UsageTime:&nbsp;<small class="text-muted">{{item.UsageTime}}&nbsp;ms</small></div>
                            </div>

                            <div v-show="endpointRecordList.length == 0" class="card card-body endpoint-record-container">
                                未找到订阅记录
                            </div>

                        </div>
                    </div>
                </div>

            </div>

        </div>

    </main>
</div>


<script type="text/javascript" charset="utf-8">
    var app = new Vue({
        el: '#app',
        data: {
            eventName: "",
            eventRecordList: [],
            eventRecordSubscriptionList: [],
            endpointRecordList: [],
            endpointList: [],
            currnetPageIndex: 1,
            pageCount: 20,
            pageNumbers: new Array(1),
            currentEventRecord: null,
            currentEndpoint: null,
            currnetEndpointCollapse: null,
        },
        beforeCreate() {
            this.eventName = "";
            this.addSubscriptionMode = "form";
        },
        mounted() {
            this.getEventRecordList();
        },
        methods: {
            getEventRecordList() {
                var startIndex = (this.currnetPageIndex - 1) * this.pageCount;
                api.eventRecord.list(startIndex, this.pageCount)
                    .success(r => {
                        this.eventRecordList = r.List;
                        this.pageNumber(r.TotalCount);
                    }).fail(e => {
                        console.log(e);
                        message.error(e.message);
                    });
            },
            getEventRecordSubscriptionList() {
                if (this.currentEventRecord) {
                    api.eventRecord.getEventRecordSubscription(this.currentEventRecord.EventRecordId)
                        .success(r => {
                            this.eventRecordSubscriptionList = r;
                        }).fail(e => {
                            console.log(e);
                            message.error(e.message);
                        });
                }
            },
            getEndpointRecordList(eventRecordSubscriptionId) {
                api.eventRecord.getEndpointSubscriptionRecord(eventRecordSubscriptionId)
                    .success(r => {
                        this.endpointRecordList = r;
                        this.currnetEndpointCollapse.show();
                    }).fail(e => {
                        console.log(e);
                        message.error(e.message);
                    });
            },
            skipPage(index) {
                this.currnetPageIndex = index + 1;
                this.getEventRecordList();
            },
            nextPage() {
                if (this.currnetPageIndex > 1) {
                    this.currnetPageIndex -= 1;
                    this.getEventRecordList();
                }
            },
            previousPage() {
                if (this.currnetPageIndex < this.pageNumbers.length) {
                    this.currnetPageIndex += 1;
                    this.getEventRecordList();
                }
            },
            pageNumber(totalCount) {
                var pageCount = 1;
                if (totalCount > 0) {
                    var pageCount = Math.ceil(totalCount / this.pageCount);
                }

                this.pageNumbers = new Array(pageCount);
            },
            selectEventRecord(data) {
                this.currentEventRecord = data;
                this.getEventRecordSubscriptionList();
                if (this.currnetEndpointCollapse) this.currnetEndpointCollapse.hide();
            },
            getBehavior(behavior) {
                if (behavior == "Retry") return "重试";
                if (behavior == "Discard") return "丢弃";

                return behavior;
            },
            getDelayUnit(delayUnit) {
                if (delayUnit == "Second") return "秒";
                if (delayUnit == "Minute") return "分";
                if (delayUnit == "Hour") return "小时";
                if (delayUnit == "Day") return "天";

                return delayUnit;
            },
            getSubscriptionType(subscriptionType) {
                if (subscriptionType == "Automatic") return "自动";
                if (subscriptionType == "Manual") return "手动";

                return subscriptionType;
            },
            selectEventRecordSubscription(data) {
                var eventRecordSubscriptionCollapse = document.getElementById(data.EventRecordSubscriptionId)
                this.currnetEndpointCollapse = new bootstrap.Collapse(eventRecordSubscriptionCollapse, {
                    toggle: false
                });

                if (!data.IsCollapse) {
                    data.IsCollapse = true;
                    this.getEndpointRecordList(data.EventRecordSubscriptionId);
                }

                if (data.IsCollapse) {
                    data.IsCollapse = false;
                    this.currnetEndpointCollapse.hide();
                }
            },
            subscription(data) {
                if (!data.SubscriptionResult) {
                    api.eventRecord.subscription(data.EventRecordSubscriptionId).success(r => {
                        message.success("订阅成功");
                    }).fail(e => {
                        console.log(e);
                        message.error(e.message);
                    });
                }
            }
        }
    });
</script>