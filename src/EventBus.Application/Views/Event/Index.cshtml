@{
    Layout = "_Layout";
    ViewData["Title"] = "Event";
}

<div class="main-container" id="app">
    <main role="main" class="pb-3">

        <div class="placeholder-block"></div>

        <div class="row">

            <div class="col-5">

                <form class="row gx-3 gy-2 align-items-center">
                    <div class="col-sm-6">
                        <label for="eventName">事件名：</label>
                        <input type="text" class="form-control" v-model="eventName" placeholder="请输入事件名">
                    </div>
                    <div class="col-auto">
                        <button type="button" class="btn btn-primary" v-on:click="getEventList()">查询</button>
                    </div>
                </form>

                <div class="action-container">
                    <button type="button" class="btn btn-primary" v-on:click="addEvent()">添加事件</button>
                </div>

                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th scope="col">序号</th>
                            <th scope="col">事件名</th>
                            <th scope="col">白名单</th>
                            <th scope="col">IP地址白名单</th>
                            <th scope="col">事件协议</th>
                            <th scope="col">操作</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="(item,index) in eventList" v-on:click="selectEvent(item)" :class="{'th-active':currentEvent?.EventId == item.EventId}" valign="middle">
                            <td scope="row">{{index+1}}</td>
                            <td>{{item.EventName}}</td>
                            <td>{{item.EnableIPAddressWhiteList ? '启用' : '未启用'}}</td>
                            <td>
                                <div v-for="ipaddress in item.IPAddressWhiteList">{{ipaddress}}</div>
                            </td>
                            <td>{{item.EventProtocol}}</td>
                            <td>
                                <button type="button" class="btn btn-link" v-on:click="editEvent(item)">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil" viewBox="0 0 16 16">
                                        <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z" />
                                    </svg>
                                </button>
                                <button type="button" class="btn btn-link" v-on:click="removeEvent(item)">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16" color="#f56c6c">
                                        <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5ZM11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H2.506a.58.58 0 0 0-.01 0H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1h-.995a.59.59 0 0 0-.01 0H11Zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5h9.916Zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47ZM8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5Z" />
                                    </svg>
                                </button>
                                <button type="button" class="btn btn-link" v-on:click="copyEvent(item)" data-bs-toggle="tooltip" data-bs-placement="right" title="复制请求地址">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-stickies" viewBox="0 0 16 16">
                                        <path d="M1.5 0A1.5 1.5 0 0 0 0 1.5V13a1 1 0 0 0 1 1V1.5a.5.5 0 0 1 .5-.5H14a1 1 0 0 0-1-1H1.5z" />
                                        <path d="M3.5 2A1.5 1.5 0 0 0 2 3.5v11A1.5 1.5 0 0 0 3.5 16h6.086a1.5 1.5 0 0 0 1.06-.44l4.915-4.914A1.5 1.5 0 0 0 16 9.586V3.5A1.5 1.5 0 0 0 14.5 2h-11zM3 3.5a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 .5.5V9h-4.5A1.5 1.5 0 0 0 9 10.5V15H3.5a.5.5 0 0 1-.5-.5v-11zm7 11.293V10.5a.5.5 0 0 1 .5-.5h4.293L10 14.793z" />
                                    </svg>
                                </button>
                            </td>
                        </tr>
                    </tbody>
                </table>

                <nav aria-label="Page navigation example">
                    <ul class="pagination justify-content-end">
                        <li class="page-item">
                            <a class="page-link" href="#" aria-label="Previous" v-on:click="nextPage()">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        <li class="page-item" v-for="(item,index) in pageNumbers">
                            <a class="page-link" href="#" v-on:click="skipPage(index)">{{index+1}}</a>
                        </li>
                        <li class="page-item">
                            <a class="page-link" href="#" aria-label="Next" v-on:click="previousPage()">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>

            </div>

            <div class="col-7">

                <div class="row">
                    <div class="col-1"></div>
                    <form class="col-11">
                        <div class="row">
                            <div class="col-sm-4">
                                <label for="endpointName">订阅名：</label>
                                <input type="text" class="form-control" v-model="endpointName" placeholder="请输入订阅名">
                            </div>
                            <div class="col-sm-auto">
                                <button type="button" class="btn btn-primary" v-on:click="getSubscriptionList()">查询</button>
                            </div>
                        </div>
                    </form>
                </div>


                <div class="action-container">
                    <button type="button" class="btn btn-primary" v-on:click="addSubscription()">添加订阅</button>
                </div>

                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th scope="col">订阅名</th>
                            <th scope="col">Url</th>
                            <th scope="col">订阅协议</th>
                            <th scope="col">请求超时时间(单位：秒)</th>
                            <th scope="col">重试策略</th>
                            <th scope="col">操作</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="(item,index) in subscriptionList" valign="middle">
                            <td>{{item.EndpointName}}</td>
                            <td>{{item.EndpointUrl}}</td>
                            <td>{{item.SubscriptionProtocol}}</td>
                            <td>{{item.RequestTimeout}}</td>
                            <td>
                                <div v-for="(policyItem,policyIndex) in item.FailedRetryPolicy">
                                    第<span>{{policyIndex+1}}</span>次：<span>{{getBehavior(policyItem.Behavior)}}</span>，<span>{{policyItem.RetryDelayCount}}</span><span>{{getDelayUnit(policyItem.RetryDelayUnit)}}</span>
                                </div>
                            </td>
                            <td>
                                <button type="button" class="btn btn-link" v-on:click="editSubscription(item)">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil" viewBox="0 0 16 16">
                                        <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z" />
                                    </svg>
                                </button>
                                <button type="button" class="btn btn-link" v-on:click="removeSubscription(item)">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3" viewBox="0 0 16 16" color="#f56c6c">
                                        <path d="M6.5 1h3a.5.5 0 0 1 .5.5v1H6v-1a.5.5 0 0 1 .5-.5ZM11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3A1.5 1.5 0 0 0 5 1.5v1H2.506a.58.58 0 0 0-.01 0H1.5a.5.5 0 0 0 0 1h.538l.853 10.66A2 2 0 0 0 4.885 16h6.23a2 2 0 0 0 1.994-1.84l.853-10.66h.538a.5.5 0 0 0 0-1h-.995a.59.59 0 0 0-.01 0H11Zm1.958 1-.846 10.58a1 1 0 0 1-.997.92h-6.23a1 1 0 0 1-.997-.92L3.042 3.5h9.916Zm-7.487 1a.5.5 0 0 1 .528.47l.5 8.5a.5.5 0 0 1-.998.06L5 5.03a.5.5 0 0 1 .47-.53Zm5.058 0a.5.5 0 0 1 .47.53l-.5 8.5a.5.5 0 1 1-.998-.06l.5-8.5a.5.5 0 0 1 .528-.47ZM8 4.5a.5.5 0 0 1 .5.5v8.5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5Z" />
                                    </svg>
                                </button>
                            </td>
                        </tr>
                    </tbody>
                </table>

            </div>

        </div>

        <div class="modal" tabindex="-1" ref="eventFormModal">
            <div class="modal-dialog  modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">{{modalTitle}}</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="row mb-3">
                                <label class="col-sm-3 col-form-label">名称</label>
                                <div class="col-sm-9">
                                    <input type="text" class="form-control" v-model="eventFormData.EventName">
                                </div>
                            </div>
                            <fieldset class="row mb-3">
                                <legend class="col-form-label col-sm-3 pt-0">白名单</legend>
                                <div class="col-sm-9">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="enableIPAddressWhiteList" v-model="eventFormData.EnableIPAddressWhiteList">
                                        <label class="form-check-label" for="enableIPAddressWhiteList">
                                            启用
                                        </label>
                                    </div>
                                </div>
                            </fieldset>
                            <div class="row mb-3">
                                <label class="col-sm-3 col-form-label">白名单地址</label>
                                <div class="col-sm-9">
                                    <input type="text" class="form-control" v-model="ipAddress">
                                    <button type="button" class="btn btn-link" v-on:click="addIPAddress()" style="padding-bottom: 14px;">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
                                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                        </svg>
                                    </button>
                                </div>

                                <div class="row" v-for="(item,index) in eventFormData.IPAddressWhiteList">
                                    <div class="col-sm-3"></div>
                                    <div class="col-sm-9" style="padding-left:18px;">
                                        {{item}}
                                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-x remove-ipaddress" viewBox="0 0 16 16" color="#f00" v-on:click="removeIPAddress(item)">
                                            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                                        </svg>
                                    </div>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <label class="col-sm-3 col-form-label">事件协议</label>
                                <div class="col-sm-9">
                                    <select class="form-select" aria-label="选择协议" v-model="eventFormData.EventProtocol">
                                        <option selected value="Http">Http</option>
                                        <option value="gRPC">gRPC</option>
                                    </select>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                        <button type="button" class="btn btn-primary" v-on:click="saveEvent()">保存</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal" tabindex="-1" ref="subscriptionFormModal">
            <div class="modal-dialog endpoint-modal modal-dialog-centered" :class="addSubscriptionMode == 'form' ?  'endpoint-modal' : 'endpoint-table-modal'">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">{{modalTitle}}</h5>
                        <div v-show="modalTitle=='添加'" class="btn-group" role="group" style="margin-left: auto;margin-right: auto;">
                            <button type="button" class="btn btn-outline-primary" :class="{'active':addSubscriptionMode == 'form'}" v-on:click="selectAddSubscriptionMode('form')">表单添加</button>
                            <button type="button" class="btn btn-outline-primary" :class="{'active':addSubscriptionMode == 'selectApplication'}" v-on:click="selectAddSubscriptionMode('selectApplication')">通过应用添加</button>
                        </div>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div v-show="addSubscriptionMode == 'form'">
                            <div class="row mb-3">
                                <label class="col-sm-2 col-form-label">订阅名</label>
                                <div class="col-sm-10">
                                    <input type="text" class="form-control" v-model="subscriptionFormData.EndpointName">
                                </div>
                            </div>
                            <div class="row mb-3">
                                <label class="col-sm-2 col-form-label">Url</label>
                                <div class="col-sm-10">
                                    <input type="text" class="form-control" style="width:100%" v-model="subscriptionFormData.EndpointUrl">
                                </div>
                            </div>
                            <div class="row mb-3">
                                <label class="col-sm-2 col-form-label">订阅协议</label>
                                <div class="col-sm-10">
                                    <select class="form-select" style="width:75%" aria-label="选择协议" v-model="subscriptionFormData.SubscriptionProtocol">
                                        <option selected value="Http">Http</option>
                                        <option value="gRPC">gRPC</option>
                                    </select>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <label class="col-sm-2 col-form-label">请求超时时间</label>
                                <div class="col-sm-10">
                                    <input type="number" class="form-control" max="60" v-model="subscriptionFormData.RequestTimeout">&nbsp;秒
                                </div>
                            </div>
                            <div class="row mb-3">
                                <label class="col-sm-2 col-form-label">重试策略</label>
                                <div class="col-sm-10">
                                    <div v-for="(item,index) in subscriptionFormData.FailedRetryPolicy">
                                        第<span>{{index+1}}</span>次：<span>{{getBehavior(item.Behavior)}}</span>，<span>{{item.RetryDelayCount}}</span><span>{{getDelayUnit(item.RetryDelayUnit)}}</span>
                                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-x remove-ipaddress" viewBox="0 0 16 16" color="#f00" v-on:click="removeRetryPolicy(index)">
                                            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                                        </svg>
                                    </div>
                                    <div v-show="subscriptionFormData.FailedRetryPolicy.length == 0 || subscriptionFormData.FailedRetryPolicy[subscriptionFormData.FailedRetryPolicy.length-1].Behavior != 'Discard'">
                                        第<span>{{subscriptionFormData.FailedRetryPolicy.length+1}}</span>次：
                                        <span>
                                            <select class="form-select" style="width:22%;display:inline;" aria-label="选择行为" v-model="retryPolicy.Behavior">
                                                <option selected value="Retry">重试</option>
                                                <option value="Discard">丢弃</option>
                                            </select>
                                        </span>
                                        <span><input type="number" class="form-control" style="width:15%;display:inline;" min="1" max="60" v-model="retryPolicy.RetryDelayCount"></span>
                                        <span>
                                            <select class="form-select" style="width:25%;display:inline;" aria-label="选择单位" v-model="retryPolicy.RetryDelayUnit">
                                                <option selected value="Second">秒</option>
                                                <option value="Minute">分</option>
                                                <option value="Hour">小时</option>
                                                <option value="Day">天</option>
                                            </select>
                                        </span>
                                        <button type="button" class="btn btn-link" v-on:click="addRetryPolicy()">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
                                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div v-show="addSubscriptionMode == 'selectApplication'">
                            <div class="row mb-3">
                                <label class="col-sm-1 col-form-label">应用</label>
                                <div class="col-sm-5">
                                    <select class="form-select" style="width:75%" aria-label="选择应用" v-on:change="selectApplication()" v-model="applicationId">
                                        <option v-for="(item,index) in applicationSelectList" :value="item.Value">{{item.Text}}</option>
                                    </select>
                                </div>
                            </div>

                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th scope="col">接入点</th>
                                        <th scope="col">Url</th>
                                        <th scope="col">订阅协议</th>
                                        <th scope="col">请求超时时间(单位：秒)</th>
                                        <th scope="col">重试策略</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="(item,index) in endpointList" v-on:click="selectEndpoint(item)" :class="{'th-active':currentEndpoint?.ApplicationEndpointId == item.ApplicationEndpointId}" valign="middle">
                                        <td>{{item.EndpointName}}</td>
                                        <td>{{item.EndpointUrl}}</td>
                                        <td>{{item.SubscriptionProtocol}}</td>
                                        <td>{{item.RequestTimeout}}</td>
                                        <td>
                                            <div v-for="(policyItem,policyIndex) in item.FailedRetryPolicy">
                                                第<span>{{policyIndex+1}}</span>次：<span>{{getBehavior(policyItem.Behavior)}}</span>，<span>{{policyItem.RetryDelayCount}}</span><span>{{getDelayUnit(policyItem.RetryDelayUnit)}}</span>
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                        <button type="button" class="btn btn-primary" v-on:click="saveSubscription()">保存</button>
                    </div>
                </div>
            </div>
        </div>

    </main>
</div>


<script type="text/javascript" charset="utf-8">
    var app = new Vue({
        el: '#app',
        data: {
            eventName: "",
            endpointName: "",
            eventList: [],
            subscriptionList: [],
            endpointList: [],
            currnetPageIndex: 1,
            pageCount: 20,
            pageNumbers: new Array(1),
            eventFormModal: null,
            subscriptionFormModal: null,
            modalTitle: "",
            eventFormData: {
                EventName: "",
                EnableIPAddressWhiteList: true,
                IPAddressWhiteList: [],
                EventProtocol: 0,
                EventId: ""
            },
            subscriptionFormData: {
                EndpointName: "",
                EndpointUrl: "",
                SubscriptionProtocol: "",
                RequestTimeout: 5,
                ApplicationId: "",
                FailedRetryPolicy: [],
                SubscriptionId: "",
                EventId: ""
            },
            retryPolicy: {
                RetryDelayUnit: "",
                RetryDelayCount: 1,
                Behavior: ""
            },
            ipAddress: "",
            currentEvent: null,
            addSubscriptionMode: 'form' || 'selectApplication',
            endpointId: "",
            applicationId: "",
            applicationSelectList: [],
            currentEndpoint: null,
        },
        beforeCreate() {
            this.eventName = "";
            this.endpointName = "";
            this.addSubscriptionMode = "form";
        },
        mounted() {
            this.eventFormModal = new bootstrap.Modal(this.$refs.eventFormModal, {
                keyboard: false
            });
            this.subscriptionFormModal = new bootstrap.Modal(this.$refs.subscriptionFormModal, {
                keyboard: false
            });
            this.getEventList();
        },
        methods: {
            getEventList() {
                var startIndex = (this.currnetPageIndex - 1) * this.pageCount;
                api.event.list(startIndex, this.pageCount, this.eventName)
                    .success(r => {
                        this.eventList = r.List;
                        this.pageNumber(r.TotalCount);
                    }).fail(e => {
                        console.log(e);
                        message.error(e.message);
                    });
            },
            getSubscriptionList() {
                if (this.currentEvent) {
                    api.subscription.list(0, 20, this.currentEvent.EventId, this.eventName)
                        .success(r => {
                            this.subscriptionList = r.List;
                        }).fail(e => {
                            console.log(e);
                            message.error(e.message);
                        });
                }
            },
            skipPage(index) {
                this.currnetPageIndex = index + 1;
                this.getEventList();
            },
            nextPage() {
                if (this.currnetPageIndex > 1) {
                    this.currnetPageIndex -= 1;
                    this.getEventList();
                }
            },
            previousPage() {
                if (this.currnetPageIndex < this.pageNumbers.length) {
                    this.currnetPageIndex += 1;
                    this.getEventList();
                }
            },
            pageNumber(totalCount) {
                var pageCount = 1;
                if (totalCount > 0) {
                    var pageCount = Math.ceil(totalCount / this.pageCount);
                }

                this.pageNumbers = new Array(pageCount);
            },
            addEvent() {
                this.modalTitle = "添加";
                this.eventFormModal.show();
            },
            editEvent(data) {
                this.modalTitle = "编辑";
                this.eventFormData.EventName = data.EventName;
                this.eventFormData.EnableIPAddressWhiteList = data.EnableIPAddressWhiteList;
                this.eventFormData.EventProtocol = data.EventProtocol;
                this.eventFormData.EventId = data.EventId;
                this.eventFormData.IPAddressWhiteList = [];
                for (var item of data.IPAddressWhiteList) {
                    this.eventFormData.IPAddressWhiteList.push(item);
                }
                this.eventFormModal.show();
            },
            removeEvent(data) {
                modal.confirm(() => {
                    api.event.delete(data.EventId)
                        .success(r => {
                            this.getEventList();
                            message.success("删除成功");
                        }).fail(e => {
                            console.log(e);
                            message.error(e.message);
                        });
                });
            },
            saveEvent() {
                var r = null;
                if (!this.eventFormData.EventId) {
                    r = api.event.add(this.eventFormData);
                }

                if (this.eventFormData.EventId) {
                    r = api.event.modify(this.eventFormData);
                }

                r.success(r => {
                    this.getEventList();
                    message.success("保存成功");
                }).fail(e => {
                    console.log(e);
                    message.error(e.message);
                }).finally(() => {
                    this.eventFormModal.hide();
                    this.initEventForm();
                });
            },
            copyEvent(data) {
                const input = document.createElement('input');
                input.type = "text";
                input.setAttribute('readonly', 'readonly');
                input.value = `${window.location.origin}/${apiVersion}/api/event/push/${data.EventId}`;
                document.body.appendChild(input);
                input.select();
                input.setSelectionRange(0, input.value.length);
                document.execCommand("Copy");
                input.style.display = 'none';
                document.body.removeChild(input);
                message.success('复制成功！');
            },
            initEventForm() {
                this.eventFormData = {
                    EventName: "",
                    EnableIPAddressWhiteList: true,
                    IPAddressWhiteList: [],
                    EventProtocol: 0,
                    EventId: null
                };
            },
            selectEvent(data) {
                this.currentEvent = data;
                this.getSubscriptionList();
            },
            addIPAddress() {
                if (!this.ipAddress) return;

                this.eventFormData.IPAddressWhiteList.unshift(this.ipAddress);
                this.ipAddress = "";
            },
            removeIPAddress(ipAddress) {
                this.eventFormData.IPAddressWhiteList = this.eventFormData.IPAddressWhiteList.filter(a => a != ipAddress);
            },
            initSubscriptionForm() {
                this.subscriptionFormData.EndpointName = "";
                this.subscriptionFormData.EndpointUrl = "";
                this.subscriptionFormData.SubscriptionProtocol = "";
                this.subscriptionFormData.RequestTimeout = 5;
                this.subscriptionFormData.FailedRetryPolicy = [];
                this.subscriptionFormData.SubscriptionId = "";
                this.subscriptionFormData.EventId = "";
            },
            addSubscription() {
                if (!this.currentEvent) {
                    message.error("请先选择事件");
                    return;
                }

                this.modalTitle = "添加";
                this.subscriptionFormData.EventId = this.currentEvent.EventId;
                this.currentEndpoint = null;
                this.subscriptionFormModal.show();
            },
            editSubscription(data) {
                this.modalTitle = "编辑";
                this.addSubscriptionMode = "form";
                this.subscriptionFormData.SubscriptionId = data.SubscriptionId;
                this.subscriptionFormData.EndpointName = data.EndpointName;
                this.subscriptionFormData.EndpointUrl = data.EndpointUrl;
                this.subscriptionFormData.EventId = data.EventId;
                this.subscriptionFormData.RequestTimeout = data.RequestTimeout;
                this.subscriptionFormData.SubscriptionProtocol = data.SubscriptionProtocol;
                this.subscriptionFormData.FailedRetryPolicy = [];
                for (var item of data.FailedRetryPolicy) {
                    this.subscriptionFormData.FailedRetryPolicy.push({
                        RetryDelayUnit: item.RetryDelayUnit,
                        RetryDelayCount: item.RetryDelayCount,
                        Behavior: item.Behavior
                    });
                }
                this.subscriptionFormModal.show();
            },
            removeSubscription(data) {
                modal.confirm(() => {
                    api.subscription.delete(data.SubscriptionId)
                        .success(r => {
                            this.getSubscriptionList();
                            message.success("删除成功");
                        }).fail(e => {
                            console.log(e);
                            message.error(e.message);
                        });
                });
            },
            saveSubscription() {
                var r = null;
                if (!this.subscriptionFormData.SubscriptionId) {

                    if (this.addSubscriptionMode == 'form')
                        r = api.subscription.addSubscription(this.subscriptionFormData);


                    if (this.addSubscriptionMode == 'selectApplication')

                        if (!this.currentEndpoint) {
                            message.error("请先选择接入点");
                            return;
                        }

                    r = api.subscription.add({
                        EventId: this.currentEvent.EventId,
                        ApplicationEndpointId: this.currentEndpoint.ApplicationEndpointId
                    });
                }

                if (this.subscriptionFormData.SubscriptionId) {
                    r = api.subscription.modify(this.subscriptionFormData);
                }

                r.success(r => {
                    this.getSubscriptionList();
                    message.success("保存成功");
                }).fail(e => {
                    console.log(e);
                    message.error(e.message);
                }).finally(() => {
                    this.subscriptionFormModal.hide();
                    this.initSubscriptionForm();
                });
            },
            removeRetryPolicy(index) {
                this.subscriptionFormData.FailedRetryPolicy.splice(index, 1);
            },
            addRetryPolicy() {
                if (this.retryPolicy.Behavior && this.retryPolicy.RetryDelayUnit) {
                    this.subscriptionFormData.FailedRetryPolicy.push({
                        RetryDelayUnit: this.retryPolicy.RetryDelayUnit,
                        RetryDelayCount: this.retryPolicy.RetryDelayCount,
                        Behavior: this.retryPolicy.Behavior
                    });
                }
            },
            getBehavior(behavior) {
                if (behavior == "Retry") return "重试";
                if (behavior == "Discard") return "丢弃";

                return behavior;
            },
            getDelayUnit(delayUnit) {
                if (delayUnit == "Second") return "秒";
                if (delayUnit == "Minute") return "分";
                if (delayUnit == "Hour") return "小时";
                if (delayUnit == "Day") return "天";

                return delayUnit;
            },
            selectAddSubscriptionMode(mode) {
                this.addSubscriptionMode = mode;

                if (mode == "selectApplication") {
                    api.application.suggestion().success(r => {
                        this.applicationSelectList = r;
                    }).fail(e => {
                        console.log(e);
                        message.error(e.message);
                    });
                }
            },
            selectApplication() {
                if (this.applicationId) {
                    api.applicationEndpoint.list(0, 20, null, this.applicationId)
                        .success(r => {
                            this.endpointList = r.List;
                            this.currentEndpoint = null;
                        }).fail(e => {
                            console.log(e);
                            message.error(e.message);
                        });
                }

            },
            selectEndpoint(data) {
                this.currentEndpoint = data;
            }
        }
    });
</script>